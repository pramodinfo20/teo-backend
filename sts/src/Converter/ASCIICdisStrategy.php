<?php

namespace App\Converter;

class ASCIICdisStrategy implements Convertible
{
    use EndiannessTrait;
    /**
     * @var string
     */
    private $strategy = 'ascii';

    /* A - Byte (Excel)
       B - Zeichen (CODE/Excel)
       C - Byte (CDIS)
       D - Unicode-Zeichen
       E - Zeichen
    */

    /**
     * @var mixed
     */
    const CONVERSION_TABLE = [
        0 => ['A' => '7C', 'B' => '142', 'C' => '7C', 'D' => 'u+17d (Ž)', 'E' => 'Ž'],
        1 => ['A' => '7D', 'B' => '125', 'C' => '7D', 'D' => 'u+7d (})', 'E' => '}'],
        2 => ['A' => '7E', 'B' => '158', 'C' => '7E', 'D' => 'u+17e (ž)', 'E' => 'ž'],
        3 => ['A' => '7F', 'B' => '63', 'C' => '7F', 'D' => 'u+17b (Ż)', 'E' => 'Ż'],
        4 => ['A' => '8A', 'B' => '138', 'C' => '8A', 'D' => 'u+160 (Š)', 'E' => 'Š'],
        5 => ['A' => '8C', 'B' => '140', 'C' => '8C', 'D' => 'u+152 (Œ)', 'E' => 'Œ'],
        6 => ['A' => '91', 'B' => '159', 'C' => '91', 'D' => 'u+178 (Ÿ)', 'E' => 'Ÿ'],
        7 => ['A' => '9A', 'B' => '154', 'C' => '9A', 'D' => 'u+161 (š)', 'E' => 'š'],
        8 => ['A' => '9C', 'B' => '156', 'C' => '9C', 'D' => 'u+153 (œ)', 'E' => 'œ'],
        9 => ['A' => 'A1', 'B' => '161', 'C' => 'A1', 'D' => 'u+a1 (¡)', 'E' => '¡'],
        10 => ['A' => 'A2', 'B' => '63', 'C' => 'A2', 'D' => 'u+104 (Ą)', 'E' => 'Ą'],
        11 => ['A' => 'A3', 'B' => '63', 'C' => 'A3', 'D' => 'u+105 (ą)', 'E' => 'ą'],
        12 => ['A' => 'A4', 'B' => '63', 'C' => 'A4', 'D' => 'u+106 (Ć)', 'E' => 'Ć'],
        13 => ['A' => 'A5', 'B' => '63', 'C' => 'A5', 'D' => 'u+107 (ć)', 'E' => 'ć'],
        14 => ['A' => 'A6', 'B' => '63', 'C' => 'A6', 'D' => 'u+118 (Ę)', 'E' => 'Ę'],
        15 => ['A' => 'A7', 'B' => '63', 'C' => 'A7', 'D' => 'u+119 (ę)', 'E' => 'ę'],
        16 => ['A' => 'A8', 'B' => '63', 'C' => 'A8', 'D' => 'u+141 (Ł)', 'E' => 'Ł'],
        17 => ['A' => 'A9', 'B' => '63', 'C' => 'A9', 'D' => 'u+142 (ł)', 'E' => 'ł'],
        18 => ['A' => 'AA', 'B' => '63', 'C' => 'AA', 'D' => 'u+143 (Ń)', 'E' => 'Ń'],
        19 => ['A' => 'AB', 'B' => '63', 'C' => 'AB', 'D' => 'u+144 (ń)', 'E' => 'ń'],
        20 => ['A' => 'AC', 'B' => '63', 'C' => 'AC', 'D' => 'u+15a (Ś)', 'E' => 'Ś'],
        21 => ['A' => 'AD', 'B' => '63', 'C' => 'AD', 'D' => 'u+15b (ś)', 'E' => 'ś'],
        22 => ['A' => 'AE', 'B' => '63', 'C' => 'AE', 'D' => 'u+179 (Ź)', 'E' => 'Ź'],
        23 => ['A' => 'AF', 'B' => '63', 'C' => 'AF', 'D' => 'u+17a (ź)', 'E' => 'ź'],
        24 => ['A' => 'B0', 'B' => '176', 'C' => 'B0', 'D' => 'u+b0 (°)', 'E' => '°'],
        25 => ['A' => 'B1', 'B' => '63', 'C' => 'B1', 'D' => 'u+17c (ż)', 'E' => 'ż'],
        26 => ['A' => 'B2', 'B' => '63', 'C' => 'B2', 'D' => 'u+10c (Č)', 'E' => 'Č'],
        27 => ['A' => 'B3', 'B' => '63', 'C' => 'B3', 'D' => 'u+10d (č)', 'E' => 'č'],
        28 => ['A' => 'B5', 'B' => '63', 'C' => 'B5', 'D' => 'u+3bc (μ)', 'E' => 'μ'],
        29 => ['A' => 'B6', 'B' => '63', 'C' => 'B6', 'D' => 'u+10e (Ď)', 'E' => 'Ď'],
        30 => ['A' => 'B7', 'B' => '63', 'C' => 'B7', 'D' => 'u+10f (ď)', 'E' => 'ď'],
        31 => ['A' => 'B8', 'B' => '48', 'C' => 'B8', 'D' => 'u+30 (0)', 'E' => '0'],
        32 => ['A' => 'B9', 'B' => '63', 'C' => 'B9', 'D' => 'u+11a (Ě)', 'E' => 'Ě'],
        33 => ['A' => 'BA', 'B' => '63', 'C' => 'BA', 'D' => 'u+11b (ě)', 'E' => 'ě'],
        34 => ['A' => 'BB', 'B' => '63', 'C' => 'BB', 'D' => 'u+147 (Ň)', 'E' => 'Ň'],
        35 => ['A' => 'BD', 'B' => '63', 'C' => 'BD', 'D' => 'u+158 (Ř)', 'E' => 'Ř'],
        36 => ['A' => 'BE', 'B' => '63', 'C' => 'BE', 'D' => 'u+159 (ř)', 'E' => 'ř'],
        37 => ['A' => 'BF', 'B' => '191', 'C' => 'BF', 'D' => 'u+bf (¿)', 'E' => '¿'],
        38 => ['A' => 'C0', 'B' => '192', 'C' => 'C0', 'D' => 'u+c0 (À)', 'E' => 'À'],
        39 => ['A' => 'C1', 'B' => '193', 'C' => 'C1', 'D' => 'u+c1 (Á)', 'E' => 'Á'],
        40 => ['A' => 'C2', 'B' => '194', 'C' => 'C2', 'D' => 'u+c2 (Â)', 'E' => 'Â'],
        41 => ['A' => 'C3', 'B' => '195', 'C' => 'C3', 'D' => 'u+c3 (Ã)', 'E' => 'Ã'],
        42 => ['A' => 'C4', 'B' => '196', 'C' => 'C4', 'D' => 'u+c4 (Ä)', 'E' => 'Ä'],
        43 => ['A' => 'C5', 'B' => '197', 'C' => 'C5', 'D' => 'u+c5 (Å)', 'E' => 'Å'],
        44 => ['A' => 'C6', 'B' => '198', 'C' => 'C6', 'D' => 'u+c6 (Æ)', 'E' => 'Æ'],
        45 => ['A' => 'C7', 'B' => '199', 'C' => 'C7', 'D' => 'u+c7 (Ç)', 'E' => 'Ç'],
        46 => ['A' => 'C8', 'B' => '200', 'C' => 'C8', 'D' => 'u+c8 (È)', 'E' => 'È'],
        47 => ['A' => 'C9', 'B' => '201', 'C' => 'C9', 'D' => 'u+c9 (É)', 'E' => 'É'],
        48 => ['A' => 'CA', 'B' => '202', 'C' => 'CA', 'D' => 'u+ca (Ê)', 'E' => 'Ê'],
        49 => ['A' => 'CB', 'B' => '203', 'C' => 'CB', 'D' => 'u+cb (Ë)', 'E' => 'Ë'],
        50 => ['A' => 'CC', 'B' => '204', 'C' => 'CC', 'D' => 'u+cc (Ì)', 'E' => 'Ì'],
        51 => ['A' => 'CD', 'B' => '205', 'C' => 'CD', 'D' => 'u+cd (Í)', 'E' => 'Í'],
        52 => ['A' => 'CE', 'B' => '206', 'C' => 'CE', 'D' => 'u+ce (Î)', 'E' => 'Î'],
        53 => ['A' => 'CF', 'B' => '207', 'C' => 'CF', 'D' => 'u+cf (Ï)', 'E' => 'Ï'],
        54 => ['A' => 'D0', 'B' => '208', 'C' => 'D0', 'D' => 'u+d0 (Ð)', 'E' => 'Ð'],
        55 => ['A' => 'D1', 'B' => '209', 'C' => 'D1', 'D' => 'u+d1 (Ñ)', 'E' => 'Ñ'],
        56 => ['A' => 'D2', 'B' => '210', 'C' => 'D2', 'D' => 'u+d2 (Ò)', 'E' => 'Ò'],
        57 => ['A' => 'D3', 'B' => '211', 'C' => 'D3', 'D' => 'u+d3 (Ó)', 'E' => 'Ó'],
        58 => ['A' => 'D4', 'B' => '212', 'C' => 'D4', 'D' => 'u+d4 (Ô)', 'E' => 'Ô'],
        59 => ['A' => 'D5', 'B' => '213', 'C' => 'D5', 'D' => 'u+d5 (Õ)', 'E' => 'Õ'],
        60 => ['A' => 'D6', 'B' => '214', 'C' => 'D6', 'D' => 'u+d6 (Ö)', 'E' => 'Ö'],
        61 => ['A' => 'D7', 'B' => '63', 'C' => 'D7', 'D' => 'u+148 (ň)', 'E' => 'ň'],
        62 => ['A' => 'D8', 'B' => '63', 'C' => 'D8', 'D' => 'u+164 (Ť)', 'E' => 'Ť'],
        63 => ['A' => 'D9', 'B' => '217', 'C' => 'D9', 'D' => 'u+d9 (Ù)', 'E' => 'Ù'],
        64 => ['A' => 'DA', 'B' => '218', 'C' => 'DA', 'D' => 'u+da (Ú)', 'E' => 'Ú'],
        65 => ['A' => 'DB', 'B' => '219', 'C' => 'DB', 'D' => 'u+db (Û)', 'E' => 'Û'],
        66 => ['A' => 'DC', 'B' => '220', 'C' => 'DC', 'D' => 'u+dc (Ü)', 'E' => 'Ü'],
        67 => ['A' => 'DD', 'B' => '221', 'C' => 'DD', 'D' => 'u+dd (Ý)', 'E' => 'Ý'],
        68 => ['A' => 'DF', 'B' => '223', 'C' => 'DF', 'D' => 'u+df (ß)', 'E' => 'ß'],
        69 => ['A' => 'E0', 'B' => '224', 'C' => 'E0', 'D' => 'u+e0 (à)', 'E' => 'à'],
        70 => ['A' => 'E1', 'B' => '225', 'C' => 'E1', 'D' => 'u+e1 (á)', 'E' => 'á'],
        71 => ['A' => 'E2', 'B' => '226', 'C' => 'E2', 'D' => 'u+e2 (â)', 'E' => 'â'],
        72 => ['A' => 'E3', 'B' => '227', 'C' => 'E3', 'D' => 'u+e3 (ã)', 'E' => 'ã'],
        73 => ['A' => 'E4', 'B' => '228', 'C' => 'E4', 'D' => 'u+e4 (ä)', 'E' => 'ä'],
        74 => ['A' => 'E5', 'B' => '229', 'C' => 'E5', 'D' => 'u+e5 (å)', 'E' => 'å'],
        75 => ['A' => 'E6', 'B' => '230', 'C' => 'E6', 'D' => 'u+e6 (æ)', 'E' => 'æ'],
        76 => ['A' => 'E7', 'B' => '231', 'C' => 'E7', 'D' => 'u+e7 (ç)', 'E' => 'ç'],
        77 => ['A' => 'E8', 'B' => '232', 'C' => 'E8', 'D' => 'u+e8 (è)', 'E' => 'è'],
        78 => ['A' => 'E9', 'B' => '233', 'C' => 'E9', 'D' => 'u+e9 (é)', 'E' => 'é'],
        79 => ['A' => 'EA', 'B' => '234', 'C' => 'EA', 'D' => 'u+ea (ê)', 'E' => 'ê'],
        80 => ['A' => 'EB', 'B' => '235', 'C' => 'EB', 'D' => 'u+eb (ë)', 'E' => 'ë'],
        81 => ['A' => 'EC', 'B' => '236', 'C' => 'EC', 'D' => 'u+ec (ì)', 'E' => 'ì'],
        82 => ['A' => 'ED', 'B' => '237', 'C' => 'ED', 'D' => 'u+ed (í)', 'E' => 'í'],
        83 => ['A' => 'EE', 'B' => '238', 'C' => 'EE', 'D' => 'u+ee (î)', 'E' => 'î'],
        84 => ['A' => 'EF', 'B' => '239', 'C' => 'EF', 'D' => 'u+ef (ï)', 'E' => 'ï'],
        85 => ['A' => 'F1', 'B' => '241', 'C' => 'F1', 'D' => 'u+f1 (ñ)', 'E' => 'ñ'],
        86 => ['A' => 'F2', 'B' => '242', 'C' => 'F2', 'D' => 'u+f2 (ò)', 'E' => 'ò'],
        87 => ['A' => 'F3', 'B' => '243', 'C' => 'F3', 'D' => 'u+f3 (ó)', 'E' => 'ó'],
        88 => ['A' => 'F4', 'B' => '244', 'C' => 'F4', 'D' => 'u+f4 (ô)', 'E' => 'ô'],
        89 => ['A' => 'F5', 'B' => '245', 'C' => 'F5', 'D' => 'u+f5 (õ)', 'E' => 'õ'],
        90 => ['A' => 'F6', 'B' => '246', 'C' => 'F6', 'D' => 'u+f6 (ö)', 'E' => 'ö'],
        91 => ['A' => 'F7', 'B' => '63', 'C' => 'F7', 'D' => 'u+165 (ť)', 'E' => 'ť'],
        92 => ['A' => 'F8', 'B' => '63', 'C' => 'F8', 'D' => 'u+16e (Ů)', 'E' => 'Ů'],
        93 => ['A' => 'F9', 'B' => '249', 'C' => 'F9', 'D' => 'u+f9 (ù)', 'E' => 'ù'],
        94 => ['A' => 'FA', 'B' => '250', 'C' => 'FA', 'D' => 'u+fa (ú)', 'E' => 'ú'],
        95 => ['A' => 'FB', 'B' => '251', 'C' => 'FB', 'D' => 'u+fb (û)', 'E' => 'û'],
        96 => ['A' => 'FC', 'B' => '252', 'C' => 'FC', 'D' => 'u+fc (ü)', 'E' => 'ü'],
        97 => ['A' => 'FD', 'B' => '253', 'C' => 'FD', 'D' => 'u+fd (ý)', 'E' => 'ý'],
        98 => ['A' => 'FE', 'B' => '63', 'C' => 'FE', 'D' => 'u+16f (ů)', 'E' => 'ů'],
        99 => ['A' => 'FF', 'B' => '255', 'C' => 'FF', 'D' => 'u+ff (ÿ)', 'E' => 'ÿ'],
        100 => ['A' => '20', 'B' => '32', 'C' => '20', 'D' => 'ascii', 'E' => ''],
        101 => ['A' => '21', 'B' => '33', 'C' => '21', 'D' => 'ascii', 'E' => '!'],
        102 => ['A' => '22', 'B' => '34', 'C' => '22', 'D' => 'ascii', 'E' => '"'],
        103 => ['A' => '23', 'B' => '35', 'C' => '23', 'D' => 'ascii', 'E' => '#'],
        104 => ['A' => '24', 'B' => '36', 'C' => '24', 'D' => 'ascii', 'E' => '$'],
        105 => ['A' => '25', 'B' => '37', 'C' => '25', 'D' => 'ascii', 'E' => '%'],
        106 => ['A' => '26', 'B' => '38', 'C' => '26', 'D' => 'ascii', 'E' => '&'],
        107 => ['A' => '27', 'B' => '39', 'C' => '27', 'D' => 'ascii', 'E' => '\''],
        108 => ['A' => '28', 'B' => '40', 'C' => '28', 'D' => 'ascii', 'E' => '('],
        109 => ['A' => '29', 'B' => '41', 'C' => '29', 'D' => 'ascii', 'E' => ')'],
        110 => ['A' => '2A', 'B' => '42', 'C' => '2A', 'D' => 'ascii', 'E' => '*'],
        111 => ['A' => '2B', 'B' => '43', 'C' => '2B', 'D' => 'ascii', 'E' => '+'],
        112 => ['A' => '2C', 'B' => '44', 'C' => '2C', 'D' => 'ascii', 'E' => ','],
        113 => ['A' => '2D', 'B' => '45', 'C' => '2D', 'D' => 'ascii', 'E' => '-'],
        114 => ['A' => '2E', 'B' => '46', 'C' => '2E', 'D' => 'ascii', 'E' => '.'],
        115 => ['A' => '2F', 'B' => '47', 'C' => '2F', 'D' => 'ascii', 'E' => '/'],
        116 => ['A' => '30', 'B' => '48', 'C' => '30', 'D' => 'ascii', 'E' => '0'],
        117 => ['A' => '31', 'B' => '49', 'C' => '31', 'D' => 'ascii', 'E' => '1'],
        118 => ['A' => '32', 'B' => '50', 'C' => '32', 'D' => 'ascii', 'E' => '2'],
        119 => ['A' => '33', 'B' => '51', 'C' => '33', 'D' => 'ascii', 'E' => '3'],
        120 => ['A' => '34', 'B' => '52', 'C' => '34', 'D' => 'ascii', 'E' => '4'],
        121 => ['A' => '35', 'B' => '53', 'C' => '35', 'D' => 'ascii', 'E' => '5'],
        122 => ['A' => '36', 'B' => '54', 'C' => '36', 'D' => 'ascii', 'E' => '6'],
        123 => ['A' => '37', 'B' => '55', 'C' => '37', 'D' => 'ascii', 'E' => '7'],
        124 => ['A' => '38', 'B' => '56', 'C' => '38', 'D' => 'ascii', 'E' => '8'],
        125 => ['A' => '39', 'B' => '57', 'C' => '39', 'D' => 'ascii', 'E' => '9'],
        126 => ['A' => '3A', 'B' => '58', 'C' => '3A', 'D' => 'ascii', 'E' => ':'],
        127 => ['A' => '3B', 'B' => '59', 'C' => '3B', 'D' => 'ascii', 'E' => ';'],
        128 => ['A' => '3C', 'B' => '60', 'C' => '3C', 'D' => 'ascii', 'E' => '<'],
        129 => ['A' => '3D', 'B' => '61', 'C' => '3D', 'D' => 'ascii', 'E' => '='],
        130 => ['A' => '3E', 'B' => '62', 'C' => '3E', 'D' => 'ascii', 'E' => '>'],
        131 => ['A' => '3F', 'B' => '63', 'C' => '3F', 'D' => 'ascii', 'E' => '?'],
        132 => ['A' => '40', 'B' => '64', 'C' => '40', 'D' => 'ascii', 'E' => '@'],
        133 => ['A' => '41', 'B' => '65', 'C' => '41', 'D' => 'ascii', 'E' => 'A'],
        134 => ['A' => '42', 'B' => '66', 'C' => '42', 'D' => 'ascii', 'E' => 'B'],
        135 => ['A' => '43', 'B' => '67', 'C' => '43', 'D' => 'ascii', 'E' => 'C'],
        136 => ['A' => '44', 'B' => '68', 'C' => '44', 'D' => 'ascii', 'E' => 'D'],
        137 => ['A' => '45', 'B' => '69', 'C' => '45', 'D' => 'ascii', 'E' => 'E'],
        138 => ['A' => '46', 'B' => '70', 'C' => '46', 'D' => 'ascii', 'E' => 'F'],
        139 => ['A' => '47', 'B' => '71', 'C' => '47', 'D' => 'ascii', 'E' => 'G'],
        140 => ['A' => '48', 'B' => '72', 'C' => '48', 'D' => 'ascii', 'E' => 'H'],
        141 => ['A' => '49', 'B' => '73', 'C' => '49', 'D' => 'ascii', 'E' => 'I'],
        142 => ['A' => '4A', 'B' => '74', 'C' => '4A', 'D' => 'ascii', 'E' => 'J'],
        143 => ['A' => '4B', 'B' => '75', 'C' => '4B', 'D' => 'ascii', 'E' => 'K'],
        144 => ['A' => '4C', 'B' => '76', 'C' => '4C', 'D' => 'ascii', 'E' => 'L'],
        145 => ['A' => '4D', 'B' => '77', 'C' => '4D', 'D' => 'ascii', 'E' => 'M'],
        146 => ['A' => '4E', 'B' => '78', 'C' => '4E', 'D' => 'ascii', 'E' => 'N'],
        147 => ['A' => '4F', 'B' => '79', 'C' => '4F', 'D' => 'ascii', 'E' => 'O'],
        148 => ['A' => '50', 'B' => '80', 'C' => '50', 'D' => 'ascii', 'E' => 'P'],
        149 => ['A' => '51', 'B' => '81', 'C' => '51', 'D' => 'ascii', 'E' => 'Q'],
        150 => ['A' => '52', 'B' => '82', 'C' => '52', 'D' => 'ascii', 'E' => 'R'],
        151 => ['A' => '53', 'B' => '83', 'C' => '53', 'D' => 'ascii', 'E' => 'S'],
        152 => ['A' => '54', 'B' => '84', 'C' => '54', 'D' => 'ascii', 'E' => 'T'],
        153 => ['A' => '55', 'B' => '85', 'C' => '55', 'D' => 'ascii', 'E' => 'U'],
        154 => ['A' => '56', 'B' => '86', 'C' => '56', 'D' => 'ascii', 'E' => 'V'],
        155 => ['A' => '57', 'B' => '87', 'C' => '57', 'D' => 'ascii', 'E' => 'W'],
        156 => ['A' => '58', 'B' => '88', 'C' => '58', 'D' => 'ascii', 'E' => 'X'],
        157 => ['A' => '59', 'B' => '89', 'C' => '59', 'D' => 'ascii', 'E' => 'Y'],
        158 => ['A' => '5A', 'B' => '90', 'C' => '5A', 'D' => 'ascii', 'E' => 'Z'],
        159 => ['A' => '5B', 'B' => '91', 'C' => '5B', 'D' => 'ascii', 'E' => '['],
        160 => ['A' => '5C', 'B' => '92', 'C' => '5C', 'D' => 'ascii', 'E' => '\\'],
        161 => ['A' => '5D', 'B' => '93', 'C' => '5D', 'D' => 'ascii', 'E' => ']'],
        162 => ['A' => '5E', 'B' => '94', 'C' => '5E', 'D' => 'ascii', 'E' => '^'],
        163 => ['A' => '5F', 'B' => '95', 'C' => '5F', 'D' => 'ascii', 'E' => '_'],
        164 => ['A' => '60', 'B' => '96', 'C' => '60', 'D' => 'ascii', 'E' => '`'],
        165 => ['A' => '61', 'B' => '97', 'C' => '61', 'D' => 'ascii', 'E' => 'a'],
        166 => ['A' => '62', 'B' => '98', 'C' => '62', 'D' => 'ascii', 'E' => 'b'],
        167 => ['A' => '63', 'B' => '99', 'C' => '63', 'D' => 'ascii', 'E' => 'c'],
        168 => ['A' => '64', 'B' => '100', 'C' => '64', 'D' => 'ascii', 'E' => 'd'],
        169 => ['A' => '65', 'B' => '101', 'C' => '65', 'D' => 'ascii', 'E' => 'e'],
        170 => ['A' => '66', 'B' => '102', 'C' => '66', 'D' => 'ascii', 'E' => 'f'],
        171 => ['A' => '67', 'B' => '103', 'C' => '67', 'D' => 'ascii', 'E' => 'g'],
        172 => ['A' => '68', 'B' => '104', 'C' => '68', 'D' => 'ascii', 'E' => 'h'],
        173 => ['A' => '69', 'B' => '105', 'C' => '69', 'D' => 'ascii', 'E' => 'i'],
        174 => ['A' => '6A', 'B' => '106', 'C' => '6A', 'D' => 'ascii', 'E' => 'j'],
        175 => ['A' => '6B', 'B' => '107', 'C' => '6B', 'D' => 'ascii', 'E' => 'k'],
        176 => ['A' => '6C', 'B' => '108', 'C' => '6C', 'D' => 'ascii', 'E' => 'l'],
        177 => ['A' => '6D', 'B' => '109', 'C' => '6D', 'D' => 'ascii', 'E' => 'm'],
        178 => ['A' => '6E', 'B' => '110', 'C' => '6E', 'D' => 'ascii', 'E' => 'n'],
        179 => ['A' => '6F', 'B' => '111', 'C' => '6F', 'D' => 'ascii', 'E' => 'o'],
        180 => ['A' => '70', 'B' => '112', 'C' => '70', 'D' => 'ascii', 'E' => 'p'],
        181 => ['A' => '71', 'B' => '113', 'C' => '71', 'D' => 'ascii', 'E' => 'q'],
        182 => ['A' => '72', 'B' => '114', 'C' => '72', 'D' => 'ascii', 'E' => 'r'],
        183 => ['A' => '73', 'B' => '115', 'C' => '73', 'D' => 'ascii', 'E' => 's'],
        184 => ['A' => '74', 'B' => '116', 'C' => '74', 'D' => 'ascii', 'E' => 't'],
        185 => ['A' => '75', 'B' => '117', 'C' => '75', 'D' => 'ascii', 'E' => 'u'],
        186 => ['A' => '76', 'B' => '118', 'C' => '76', 'D' => 'ascii', 'E' => 'v'],
        187 => ['A' => '77', 'B' => '119', 'C' => '77', 'D' => 'ascii', 'E' => 'w'],
        188 => ['A' => '78', 'B' => '120', 'C' => '78', 'D' => 'ascii', 'E' => 'x'],
        189 => ['A' => '79', 'B' => '121', 'C' => '79', 'D' => 'ascii', 'E' => 'y'],
        190 => ['A' => '7A', 'B' => '122', 'C' => '7A', 'D' => 'ascii', 'E' => 'z'],
        191 => ['A' => '7B', 'B' => '123', 'C' => '7B', 'D' => 'ascii', 'E' => '{'],
        192 => ['A' => '7C', 'B' => '124', 'C' => '7C', 'D' => 'ascii', 'E' => '|'],
        193 => ['A' => '7D', 'B' => '125', 'C' => '7D', 'D' => 'ascii', 'E' => '}'],
        194 => ['A' => '7E', 'B' => '126', 'C' => '7E', 'D' => 'ascii', 'E' => '~'],
    ];

    /**
     * @param string $variableType
     *
     * @return bool
     */
    public function isConvertible(string $variableType): bool
    {
        return $variableType === $this->strategy;
    }

    /**
     * ASCII ignore endianness - Always Big Endian
     * @param string $value
     * @param int    $bytes
     * @param bool   $parameterBigEndian
     *
     * @return string
     */
    public function convertToHex(
        string $value,
        int $bytes,
        bool $parameterBigEndian
    ): string
    {
        $ut8Split = function ($str, $len = 1)
        {
            $arr = array();
            $strLen = mb_strlen($str, 'UTF-8');
            for ($i = 0; $i < $strLen; $i++)
            {
                $arr[] = mb_substr($str, $i, $len, 'UTF-8');
            }
            return $arr;
        };

        return "0x" . $this->calculateEndian(str_pad(implode("", array_map(function ($decimalValue)
            {
                return self::CONVERSION_TABLE[array_search(
                    mb_ord($decimalValue, 'UTF-8'), array_column(self::CONVERSION_TABLE, 'B'))]['C'];

            }, $ut8Split($value))), 56, '0', STR_PAD_RIGHT), true);
    }


    /**
     * ASCII ignore endianness - Always Big Endian
     * @param string $hex
     * @param int    $bytes
     * @param bool   $parameterBigEndian
     *
     * @return string
     */
    public function convertFromHex(
        string $hex,
        int $bytes,
        bool $parameterBigEndian
    ): string
    {
        $flag = true;

        return implode("", array_map(function ($hexValue)
        {
            return self::CONVERSION_TABLE[array_search($hexValue, array_column(self::CONVERSION_TABLE, 'A'))]['E'];
        }, array_filter(str_split($this->calculateEndian($hex, true), 2),
            function ($hexValue)
        use (&$flag) {
            if ($flag == true && !("00" <=> $hexValue)) {
                $flag = false;
            }
            return $flag;
        })));
    }
}